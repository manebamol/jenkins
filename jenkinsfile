pipeline {
  agent any

  environment {
    CHECKMARX_CREDENTIALS_ID = 'CxSast'
    CHECKMARX_USERNAME = credentials('CxUser')
    CHECKMARX_PASSWORD = credentials('CxPass')
    CHECKMARX_PROJECT_NAME = credentials('CxProject')
    CHECKMARX_SERVER_URL = credentials('CxServer')
  }

  stages {
    stage('Preparation') {
      steps {
        script {
          echo 'Preparing workspace and setting up environment.'
        }
      }
    }

    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [
            [name: '*/master']
          ],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          submoduleCfg: [],
          userRemoteConfigs: [
            [url: 'https://github.com/vbarhate/JavaVulnerableLabE.git']
          ]
        ])
      }
    }
    stage('Checkmarx SAST Scan') {
      steps {
        script {
          def filterPattern = credentials('CxFilterPattern')
          step([
            $class: 'CxScanBuilder',
            comment: '',
            configAsCode: true,
            credentialsId: env.CHECKMARX_CREDENTIALS_ID,
            customFields: '',
            excludeFolders: '',
            exclusionsSetting: 'global',
            failBuildOnNewResults: false,
            failBuildOnNewSeverity: 'CRITICAL',
            filterPattern: filterPattern,
            fullScanCycle: 10,
            groupId: '1',
            password: env.CHECKMARX_PASSWORD,
            preset: '36',
            projectLevelCustomFields: '',
            projectName: env.CHECKMARX_PROJECT_NAME,
            sastEnabled: true,
            serverUrl: env.CHECKMARX_SERVER_URL,
            sourceEncoding: '1',
            username: env.CHECKMARX_USERNAME,
            vulnerabilityThresholdResult: 'FAILURE',
            waitForResultsEnabled: true
          ])
        }
      }
    }
  }
}